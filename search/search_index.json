{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GeoAI-Tutorials","text":"<p>A collection of Jupyter notebook examples for using GeoAI</p>"},{"location":"#population-dynamics-foundation-model","title":"Population Dynamics Foundation Model","text":"<p>Tutorials for Using Google's Population Dynamics Foundation Model (PDFM)</p> <ul> <li>Predicting US Housing Prices with PDFM and Zillow Data</li> <li>Visualizing PDFM Features and Predicted Home Values</li> </ul>"},{"location":"#demos","title":"Demos","text":"<ul> <li>Visualize US meidan home values at the county level</li> </ul> <ul> <li>Visualize PDFM features</li> </ul>"},{"location":"PDFM/map_pdfm_features/","title":"Map pdfm features","text":"<p>Mapping PDFM Features and Predicted Housing Prices</p> In\u00a0[\u00a0]: Copied! <pre># %pip install \"leafmap[maplibre]\" scikit-learn\n</pre> # %pip install \"leafmap[maplibre]\" scikit-learn In\u00a0[\u00a0]: Copied! <pre>import os\nimport pandas as pd\nimport geopandas as gpd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom leafmap.common import evaluate_model, plot_actual_vs_predicted, download_file\nimport leafmap.maplibregl as leafmap\n</pre> import os import pandas as pd import geopandas as gpd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.neighbors import KNeighborsRegressor from leafmap.common import evaluate_model, plot_actual_vs_predicted, download_file import leafmap.maplibregl as leafmap In\u00a0[\u00a0]: Copied! <pre>zhvi_url = \"https://github.com/opengeos/datasets/releases/download/us/zillow_home_value_index_by_county.csv\"\nzhvi_file = \"data/zillow_home_value_index_by_county.csv\"\n</pre> zhvi_url = \"https://github.com/opengeos/datasets/releases/download/us/zillow_home_value_index_by_county.csv\" zhvi_file = \"data/zillow_home_value_index_by_county.csv\" In\u00a0[\u00a0]: Copied! <pre>if not os.path.exists(zhvi_file):\n    download_file(zhvi_url, zhvi_file)\n</pre> if not os.path.exists(zhvi_file):     download_file(zhvi_url, zhvi_file) In\u00a0[\u00a0]: Copied! <pre>zhvi_df = pd.read_csv(\n    zhvi_file, dtype={\"StateCodeFIPS\": \"string\", \"MunicipalCodeFIPS\": \"string\"}\n)\nzhvi_df.index = \"geoId/\" + zhvi_df[\"StateCodeFIPS\"] + zhvi_df[\"MunicipalCodeFIPS\"]\nzhvi_df.head()\n</pre> zhvi_df = pd.read_csv(     zhvi_file, dtype={\"StateCodeFIPS\": \"string\", \"MunicipalCodeFIPS\": \"string\"} ) zhvi_df.index = \"geoId/\" + zhvi_df[\"StateCodeFIPS\"] + zhvi_df[\"MunicipalCodeFIPS\"] zhvi_df.head() In\u00a0[\u00a0]: Copied! <pre>county_geojson = \"data/county.geojson\"\nif not os.path.exists(county_geojson):\n    raise FileNotFoundError(\"Please request the embeddings from Google\")\n</pre> county_geojson = \"data/county.geojson\" if not os.path.exists(county_geojson):     raise FileNotFoundError(\"Please request the embeddings from Google\") In\u00a0[\u00a0]: Copied! <pre>county_gdf = gpd.read_file(county_geojson)\ncounty_gdf.set_index(\"place\", inplace=True)\ncounty_gdf.head()\n</pre> county_gdf = gpd.read_file(county_geojson) county_gdf.set_index(\"place\", inplace=True) county_gdf.head() In\u00a0[\u00a0]: Copied! <pre>df = zhvi_df.join(county_gdf)\nzhvi_gdf = gpd.GeoDataFrame(df, geometry=\"geometry\")\nzhvi_gdf.head()\n</pre> df = zhvi_df.join(county_gdf) zhvi_gdf = gpd.GeoDataFrame(df, geometry=\"geometry\") zhvi_gdf.head() In\u00a0[\u00a0]: Copied! <pre>column = \"2024-10-31\"\ngdf = zhvi_gdf[[\"RegionName\", \"State\", column, \"geometry\"]]\ngdf.head()\n</pre> column = \"2024-10-31\" gdf = zhvi_gdf[[\"RegionName\", \"State\", column, \"geometry\"]] gdf.head() In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\")\nfirst_symbol_id = m.find_first_symbol_layer()[\"id\"]\nm.add_data(\n    gdf,\n    cmap=\"Blues\",\n    column=column,\n    legend_title=\"Median Home Value\",\n    name=\"Median Home Value\",\n    before_id=first_symbol_id,\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\") first_symbol_id = m.find_first_symbol_layer()[\"id\"] m.add_data(     gdf,     cmap=\"Blues\",     column=column,     legend_title=\"Median Home Value\",     name=\"Median Home Value\",     before_id=first_symbol_id, ) m.add_layer_control() m <p></p> In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\", pitch=60)\nm.add_data(\n    gdf,\n    cmap=\"Blues\",\n    column=column,\n    legend_title=\"Median Home Value\",\n    extrude=True,\n    scale_factor=3,\n    before_id=first_symbol_id,\n    name=\"Median Home Value\",\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\", pitch=60) m.add_data(     gdf,     cmap=\"Blues\",     column=column,     legend_title=\"Median Home Value\",     extrude=True,     scale_factor=3,     before_id=first_symbol_id,     name=\"Median Home Value\", ) m.add_layer_control() m <p></p> In\u00a0[\u00a0]: Copied! <pre>embeddings_file_path = \"data/county_embeddings.csv\"\n</pre> embeddings_file_path = \"data/county_embeddings.csv\" In\u00a0[\u00a0]: Copied! <pre>embeddings_df = pd.read_csv(embeddings_file_path).set_index(\"place\")\nembeddings_df.head()\n</pre> embeddings_df = pd.read_csv(embeddings_file_path).set_index(\"place\") embeddings_df.head() In\u00a0[\u00a0]: Copied! <pre>df = embeddings_df.join(county_gdf)\nembeddings_gdf = gpd.GeoDataFrame(df, geometry=\"geometry\")\nembeddings_gdf.head()\n</pre> df = embeddings_df.join(county_gdf) embeddings_gdf = gpd.GeoDataFrame(df, geometry=\"geometry\") embeddings_gdf.head() In\u00a0[\u00a0]: Copied! <pre>column = \"feature329\"  # Change this to the feature you want to use\ngdf = embeddings_gdf[[column, \"state\", \"county\", \"geometry\"]]\ngdf.head()\n</pre> column = \"feature329\"  # Change this to the feature you want to use gdf = embeddings_gdf[[column, \"state\", \"county\", \"geometry\"]] gdf.head() In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\")\nm.add_data(\n    gdf,\n    cmap=\"Blues\",\n    column=column,\n    legend_title=column,\n    before_id=first_symbol_id,\n    name=column,\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\") m.add_data(     gdf,     cmap=\"Blues\",     column=column,     legend_title=column,     before_id=first_symbol_id,     name=column, ) m.add_layer_control() m <p></p> In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\", pitch=60)\nm.add_data(\n    gdf,\n    cmap=\"Blues\",\n    column=column,\n    legend_title=column,\n    before_id=first_symbol_id,\n    name=column,\n    extrude=True,\n    scale_factor=0.00005,\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\", pitch=60) m.add_data(     gdf,     cmap=\"Blues\",     column=column,     legend_title=column,     before_id=first_symbol_id,     name=column,     extrude=True,     scale_factor=0.00005, ) m.add_layer_control() m <p></p> In\u00a0[\u00a0]: Copied! <pre>data = zhvi_df.join(embeddings_df, how=\"inner\")\ndata.head()\n</pre> data = zhvi_df.join(embeddings_df, how=\"inner\") data.head() In\u00a0[\u00a0]: Copied! <pre>embedding_features = [f\"feature{x}\" for x in range(330)]\nlabel = \"2024-10-31\"  # Change this to the date you want to predict\n</pre> embedding_features = [f\"feature{x}\" for x in range(330)] label = \"2024-10-31\"  # Change this to the date you want to predict In\u00a0[\u00a0]: Copied! <pre>data = data.dropna(subset=[label])\n</pre> data = data.dropna(subset=[label]) In\u00a0[\u00a0]: Copied! <pre>data = data[embedding_features + [label]]\nX = data[embedding_features]\ny = data[label]\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42\n)\n</pre> data = data[embedding_features + [label]] X = data[embedding_features] y = data[label]  X_train, X_test, y_train, y_test = train_test_split(     X, y, test_size=0.2, random_state=42 ) In\u00a0[\u00a0]: Copied! <pre>model = LinearRegression()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n</pre> model = LinearRegression() model.fit(X_train, y_train) y_pred = model.predict(X_test) In\u00a0[\u00a0]: Copied! <pre>evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred})\nmetrics = evaluate_model(evaluation_df)\nprint(metrics)\n</pre> evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred}) metrics = evaluate_model(evaluation_df) print(metrics) In\u00a0[\u00a0]: Copied! <pre>xy_lim = (0, 1_000_000)\nplot_actual_vs_predicted(\n    evaluation_df,\n    xlim=xy_lim,\n    ylim=xy_lim,\n    title=\"Actual vs Predicted Home Values\",\n    x_label=\"Actual Home Value\",\n    y_label=\"Predicted Home Value\",\n)\n</pre> xy_lim = (0, 1_000_000) plot_actual_vs_predicted(     evaluation_df,     xlim=xy_lim,     ylim=xy_lim,     title=\"Actual vs Predicted Home Values\",     x_label=\"Actual Home Value\",     y_label=\"Predicted Home Value\", ) <p></p> In\u00a0[\u00a0]: Copied! <pre>df = evaluation_df.join(gdf)\ndf[\"difference\"] = df[\"y_pred\"] - df[\"y\"]\nevaluation_gdf = gpd.GeoDataFrame(df, geometry=\"geometry\")\nevaluation_gdf.drop(columns=[\"category\", \"color\", column], inplace=True)\nevaluation_gdf.head()\n</pre> df = evaluation_df.join(gdf) df[\"difference\"] = df[\"y_pred\"] - df[\"y\"] evaluation_gdf = gpd.GeoDataFrame(df, geometry=\"geometry\") evaluation_gdf.drop(columns=[\"category\", \"color\", column], inplace=True) evaluation_gdf.head() In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\", pitch=60)\nm.add_data(\n    evaluation_gdf,\n    cmap=\"Blues\",\n    column=\"y\",\n    legend_title=\"Actual Home Value\",\n    before_id=first_symbol_id,\n    name=\"Actual Home Value\",\n    extrude=True,\n    scale_factor=3,\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\", pitch=60) m.add_data(     evaluation_gdf,     cmap=\"Blues\",     column=\"y\",     legend_title=\"Actual Home Value\",     before_id=first_symbol_id,     name=\"Actual Home Value\",     extrude=True,     scale_factor=3, ) m.add_layer_control() m <p></p> In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\", pitch=60)\nm.add_data(\n    evaluation_gdf,\n    cmap=\"Blues\",\n    column=\"y_pred\",\n    legend_title=\"Predicted Home Value\",\n    before_id=first_symbol_id,\n    name=\"Predicted Home Value\",\n    extrude=True,\n    scale_factor=3,\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\", pitch=60) m.add_data(     evaluation_gdf,     cmap=\"Blues\",     column=\"y_pred\",     legend_title=\"Predicted Home Value\",     before_id=first_symbol_id,     name=\"Predicted Home Value\",     extrude=True,     scale_factor=3, ) m.add_layer_control() m <p></p> In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\", pitch=60)\nm.add_data(\n    evaluation_gdf,\n    cmap=\"coolwarm\",\n    column=\"difference\",\n    legend_title=\"y_pred-y\",\n    before_id=first_symbol_id,\n    name=\"Difference\",\n    extrude=True,\n    scale_factor=3,\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\", pitch=60) m.add_data(     evaluation_gdf,     cmap=\"coolwarm\",     column=\"difference\",     legend_title=\"y_pred-y\",     before_id=first_symbol_id,     name=\"Difference\",     extrude=True,     scale_factor=3, ) m.add_layer_control() m <p></p>"},{"location":"PDFM/map_pdfm_features/#useful-resources","title":"Useful Resources\u00b6","text":"<ul> <li>Google's Population Dynamics Foundation Model (PDFM)</li> <li>Request access to PDFM embeddings here</li> <li>Zillow data can be accessed here</li> </ul>"},{"location":"PDFM/map_pdfm_features/#installation","title":"Installation\u00b6","text":"<p>Uncomment and run the following cell to install the required libraries.</p>"},{"location":"PDFM/map_pdfm_features/#import-libraries","title":"Import Libraries\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#download-zillow-data","title":"Download Zillow Data\u00b6","text":"<p>Download the Zillow home value data at the county level.</p>"},{"location":"PDFM/map_pdfm_features/#process-zillow-data","title":"Process Zillow Data\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#request-access-to-pdfm-embeddings","title":"Request access to PDFM Embeddings\u00b6","text":"<p>To request access to PDFM embeddings, please follow the instructions here.</p>"},{"location":"PDFM/map_pdfm_features/#load-county-boundaries","title":"Load county boundaries\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#join-home-value-data-and-county-boundaries","title":"Join home value data and county boundaries\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#visualize-home-values-in-2d","title":"Visualize home values in 2D\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#visualize-home-values-in-3d","title":"Visualize home values in 3D\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#load-pdfm-county-embeddings","title":"Load PDFM county embeddings\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#visualize-pdfm-features","title":"Visualize PDFM features\u00b6","text":"<p>Select any of the 329 PDFM features to visualize.</p>"},{"location":"PDFM/map_pdfm_features/#join-zillow-and-pdfm-data","title":"Join Zillow and PDFM Data\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#split-train-and-test-data","title":"Split Train and Test Data\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#fit-linear-regression-model","title":"Fit Linear Regression Model\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#evaluate-linear-regression-model","title":"Evaluate Linear Regression Model\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#join-predicted-values-with-county-boundaries","title":"Join predicted values with county boundaries\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#visualize-actual-home-values","title":"Visualize actual home values\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#visualize-predicted-home-values","title":"Visualize predicted home values\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#visualize-difference-between-predicted-and-actual-home-values","title":"Visualize difference between predicted and actual home values\u00b6","text":""},{"location":"PDFM/zillow_home_value/","title":"Zillow home value","text":"<p>Predicting US Housing Prices at the Zip Code Level Using Google's Population Dynamics Foundation Model and Zillow Data</p> In\u00a0[\u00a0]: Copied! <pre># %pip install leafmap scikit-learn\n</pre> # %pip install leafmap scikit-learn In\u00a0[\u00a0]: Copied! <pre>import os\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom leafmap.common import evaluate_model, plot_actual_vs_predicted, download_file\n</pre> import os import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.neighbors import KNeighborsRegressor from leafmap.common import evaluate_model, plot_actual_vs_predicted, download_file In\u00a0[\u00a0]: Copied! <pre>zhvi_url = \"https://github.com/opengeos/datasets/releases/download/us/zillow_home_value_index_by_zipcode.csv\"\nzhvi_file = \"data/zillow_home_value_index_by_zipcode.csv\"\n</pre> zhvi_url = \"https://github.com/opengeos/datasets/releases/download/us/zillow_home_value_index_by_zipcode.csv\" zhvi_file = \"data/zillow_home_value_index_by_zipcode.csv\" In\u00a0[\u00a0]: Copied! <pre>if not os.path.exists(zhvi_file):\n    download_file(zhvi_url, zhvi_file)\n</pre> if not os.path.exists(zhvi_file):     download_file(zhvi_url, zhvi_file) In\u00a0[\u00a0]: Copied! <pre>zhvi_df = pd.read_csv(zhvi_file, dtype={\"RegionName\": \"string\"})\nzhvi_df.index = zhvi_df[\"RegionName\"].apply(lambda x: f\"zip/{x}\")\nzhvi_df.head()\n</pre> zhvi_df = pd.read_csv(zhvi_file, dtype={\"RegionName\": \"string\"}) zhvi_df.index = zhvi_df[\"RegionName\"].apply(lambda x: f\"zip/{x}\") zhvi_df.head() In\u00a0[\u00a0]: Copied! <pre>embeddings_file_path = \"data/zcta_embeddings.csv\"\n</pre> embeddings_file_path = \"data/zcta_embeddings.csv\" <p>To request access to PDFM embeddings, please follow the instructions here.</p> In\u00a0[\u00a0]: Copied! <pre>if not os.path.exists(embeddings_file_path):\n    raise FileNotFoundError(\"Please request the embeddings from Google\")\n</pre> if not os.path.exists(embeddings_file_path):     raise FileNotFoundError(\"Please request the embeddings from Google\") In\u00a0[\u00a0]: Copied! <pre>zipcode_embeddings = pd.read_csv(embeddings_file_path).set_index(\"place\")\nzipcode_embeddings.head()\n</pre> zipcode_embeddings = pd.read_csv(embeddings_file_path).set_index(\"place\") zipcode_embeddings.head() In\u00a0[\u00a0]: Copied! <pre>data = zhvi_df.join(zipcode_embeddings, how=\"inner\")\ndata.head()\n</pre> data = zhvi_df.join(zipcode_embeddings, how=\"inner\") data.head() In\u00a0[\u00a0]: Copied! <pre>embedding_features = [f\"feature{x}\" for x in range(330)]\nlabel = \"2024-10-31\"\n</pre> embedding_features = [f\"feature{x}\" for x in range(330)] label = \"2024-10-31\" In\u00a0[\u00a0]: Copied! <pre>data = data.dropna(subset=[label])\n</pre> data = data.dropna(subset=[label]) In\u00a0[\u00a0]: Copied! <pre>data = data[embedding_features + [label]]\nX = data[embedding_features]\ny = data[label]\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42\n)\n</pre> data = data[embedding_features + [label]] X = data[embedding_features] y = data[label]  X_train, X_test, y_train, y_test = train_test_split(     X, y, test_size=0.2, random_state=42 ) In\u00a0[\u00a0]: Copied! <pre># Initialize and train a simple linear regression model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n</pre> # Initialize and train a simple linear regression model model = LinearRegression() model.fit(X_train, y_train)  # Make predictions y_pred = model.predict(X_test) In\u00a0[\u00a0]: Copied! <pre>evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred})\nmetrics = evaluate_model(evaluation_df)\nprint(metrics)\n</pre> evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred}) metrics = evaluate_model(evaluation_df) print(metrics) In\u00a0[\u00a0]: Copied! <pre>xy_lim = (0, 3_000_000)\nplot_actual_vs_predicted(\n    evaluation_df,\n    xlim=xy_lim,\n    ylim=xy_lim,\n    title=\"Actual vs Predicted Home Values\",\n    x_label=\"Actual Home Value\",\n    y_label=\"Predicted Home Value\",\n)\n</pre> xy_lim = (0, 3_000_000) plot_actual_vs_predicted(     evaluation_df,     xlim=xy_lim,     ylim=xy_lim,     title=\"Actual vs Predicted Home Values\",     x_label=\"Actual Home Value\",     y_label=\"Predicted Home Value\", ) <p></p> In\u00a0[\u00a0]: Copied! <pre>k = 5\nmodel = KNeighborsRegressor(n_neighbors=k)\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\n</pre> k = 5 model = KNeighborsRegressor(n_neighbors=k) model.fit(X_train, y_train)  y_pred = model.predict(X_test) In\u00a0[\u00a0]: Copied! <pre>evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred})\n# Evaluate the model\nmetrics = evaluate_model(evaluation_df)\nprint(metrics)\n</pre> evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred}) # Evaluate the model metrics = evaluate_model(evaluation_df) print(metrics) In\u00a0[\u00a0]: Copied! <pre>plot_actual_vs_predicted(\n    evaluation_df,\n    xlim=xy_lim,\n    ylim=xy_lim,\n    title=\"Actual vs Predicted Home Values\",\n    x_label=\"Actual Home Value\",\n    y_label=\"Predicted Home Value\",\n)\n</pre> plot_actual_vs_predicted(     evaluation_df,     xlim=xy_lim,     ylim=xy_lim,     title=\"Actual vs Predicted Home Values\",     x_label=\"Actual Home Value\",     y_label=\"Predicted Home Value\", ) <p></p>"},{"location":"PDFM/zillow_home_value/#useful-resources","title":"Useful Resources\u00b6","text":"<ul> <li>Google's Population Dynamics Foundation Model (PDFM)</li> <li>Request access to PDFM embeddings here</li> <li>Zillow data can be accessed here</li> </ul>"},{"location":"PDFM/zillow_home_value/#acknowledgements","title":"Acknowledgements\u00b6","text":"<p>This notebook is adapted from the PDFM tutorial. Credit goes to the authors of the PDFM tutorial.</p>"},{"location":"PDFM/zillow_home_value/#installation","title":"Installation\u00b6","text":"<p>Uncomment and run the following cell to install the required libraries.</p>"},{"location":"PDFM/zillow_home_value/#import-libraries","title":"Import Libraries\u00b6","text":""},{"location":"PDFM/zillow_home_value/#download-zillow-data","title":"Download Zillow Data\u00b6","text":""},{"location":"PDFM/zillow_home_value/#process-zillow-data","title":"Process Zillow Data\u00b6","text":""},{"location":"PDFM/zillow_home_value/#request-access-to-pdfm-embeddings","title":"Request access to PDFM Embeddings\u00b6","text":""},{"location":"PDFM/zillow_home_value/#load-pdfm-embeddings","title":"Load PDFM Embeddings\u00b6","text":""},{"location":"PDFM/zillow_home_value/#join-zillow-and-pdfm-data","title":"Join Zillow and PDFM Data\u00b6","text":""},{"location":"PDFM/zillow_home_value/#split-train-and-test-data","title":"Split Train and Test Data\u00b6","text":""},{"location":"PDFM/zillow_home_value/#fit-linear-regression-model","title":"Fit Linear Regression Model\u00b6","text":""},{"location":"PDFM/zillow_home_value/#evaluate-linear-regression-model","title":"Evaluate Linear Regression Model\u00b6","text":""},{"location":"PDFM/zillow_home_value/#fit-k-nearest-neighbors-model","title":"Fit K-Nearest Neighbors Model\u00b6","text":""},{"location":"PDFM/zillow_home_value/#evaluate-k-nearest-neighbors-model","title":"Evaluate K-Nearest Neighbors Model\u00b6","text":""}]}