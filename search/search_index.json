{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GeoAI-Tutorials","text":"<p>A collection of Jupyter notebook examples for using GeoAI</p>"},{"location":"#population-dynamics-foundation-model","title":"Population Dynamics Foundation Model","text":"<p>Tutorials for Using Google's Population Dynamics Foundation Model (PDFM)</p> <ul> <li>Predicting US Housing Prices with PDFM and Zillow Data</li> </ul>"},{"location":"PDFM/zillow_home_value/","title":"Zillow home value","text":"<p>Predicting US Housing Prices at the Zip Code Level Using Google's Population Dynamics Foundation Model and Zillow Data</p> In\u00a0[\u00a0]: Copied! <pre># %pip install leafmap scikit-learn\n</pre> # %pip install leafmap scikit-learn In\u00a0[\u00a0]: Copied! <pre>import os\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom leafmap.common import evaluate_model, plot_actual_vs_predicted, download_file\n</pre> import os import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.neighbors import KNeighborsRegressor from leafmap.common import evaluate_model, plot_actual_vs_predicted, download_file In\u00a0[\u00a0]: Copied! <pre>zhvi_url = \"https://github.com/opengeos/datasets/releases/download/us/zillow_home_value_index_by_zipcode.csv\"\nzhvi_file = \"data/zillow_home_value_index_by_zipcode.csv\"\n</pre> zhvi_url = \"https://github.com/opengeos/datasets/releases/download/us/zillow_home_value_index_by_zipcode.csv\" zhvi_file = \"data/zillow_home_value_index_by_zipcode.csv\" In\u00a0[\u00a0]: Copied! <pre>if not os.path.exists(zhvi_file):\n    download_file(zhvi_url, zhvi_file)\n</pre> if not os.path.exists(zhvi_file):     download_file(zhvi_url, zhvi_file) In\u00a0[\u00a0]: Copied! <pre>zhvi_df = pd.read_csv(zhvi_file, dtype={\"RegionName\": \"string\"})\nzhvi_df.index = zhvi_df[\"RegionName\"].apply(lambda x: f\"zip/{x}\")\nzhvi_df.head()\n</pre> zhvi_df = pd.read_csv(zhvi_file, dtype={\"RegionName\": \"string\"}) zhvi_df.index = zhvi_df[\"RegionName\"].apply(lambda x: f\"zip/{x}\") zhvi_df.head() In\u00a0[\u00a0]: Copied! <pre>embeddings_file_path = \"data/zcta_embeddings.csv\"\n</pre> embeddings_file_path = \"data/zcta_embeddings.csv\" <p>To request access to PDFM embeddings, please follow the instructions here.</p> In\u00a0[\u00a0]: Copied! <pre>if not os.path.exists(embeddings_file_path):\n    raise FileNotFoundError(\"Please request the embeddings from Google\")\n</pre> if not os.path.exists(embeddings_file_path):     raise FileNotFoundError(\"Please request the embeddings from Google\") In\u00a0[\u00a0]: Copied! <pre>zipcode_embeddings = pd.read_csv(embeddings_file_path).set_index(\"place\")\nzipcode_embeddings.head()\n</pre> zipcode_embeddings = pd.read_csv(embeddings_file_path).set_index(\"place\") zipcode_embeddings.head() In\u00a0[\u00a0]: Copied! <pre>data = zhvi_df.join(zipcode_embeddings, how=\"inner\")\ndata.head()\n</pre> data = zhvi_df.join(zipcode_embeddings, how=\"inner\") data.head() In\u00a0[\u00a0]: Copied! <pre>embedding_features = [f\"feature{x}\" for x in range(330)]\nlabel = \"2024-10-31\"\n</pre> embedding_features = [f\"feature{x}\" for x in range(330)] label = \"2024-10-31\" In\u00a0[\u00a0]: Copied! <pre>data = data.dropna(subset=[label])\n</pre> data = data.dropna(subset=[label]) In\u00a0[\u00a0]: Copied! <pre>data = data[embedding_features + [label]]\nX = data[embedding_features]\ny = data[label]\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42\n)\n</pre> data = data[embedding_features + [label]] X = data[embedding_features] y = data[label]  X_train, X_test, y_train, y_test = train_test_split(     X, y, test_size=0.2, random_state=42 ) In\u00a0[\u00a0]: Copied! <pre># Initialize and train a simple linear regression model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n</pre> # Initialize and train a simple linear regression model model = LinearRegression() model.fit(X_train, y_train)  # Make predictions y_pred = model.predict(X_test) In\u00a0[\u00a0]: Copied! <pre>evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred})\nmetrics = evaluate_model(evaluation_df)\nprint(metrics)\n</pre> evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred}) metrics = evaluate_model(evaluation_df) print(metrics) In\u00a0[\u00a0]: Copied! <pre>xy_lim = (0, 3_000_000)\nplot_actual_vs_predicted(\n    evaluation_df,\n    xlim=xy_lim,\n    ylim=xy_lim,\n    title=\"Actual vs Predicted Home Values\",\n    x_label=\"Actual Home Value\",\n    y_label=\"Predicted Home Value\",\n)\n</pre> xy_lim = (0, 3_000_000) plot_actual_vs_predicted(     evaluation_df,     xlim=xy_lim,     ylim=xy_lim,     title=\"Actual vs Predicted Home Values\",     x_label=\"Actual Home Value\",     y_label=\"Predicted Home Value\", ) <p></p> In\u00a0[\u00a0]: Copied! <pre>k = 5\nmodel = KNeighborsRegressor(n_neighbors=k)\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\n</pre> k = 5 model = KNeighborsRegressor(n_neighbors=k) model.fit(X_train, y_train)  y_pred = model.predict(X_test) In\u00a0[\u00a0]: Copied! <pre>evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred})\n# Evaluate the model\nmetrics = evaluate_model(evaluation_df)\nprint(metrics)\n</pre> evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred}) # Evaluate the model metrics = evaluate_model(evaluation_df) print(metrics) In\u00a0[\u00a0]: Copied! <pre>plot_actual_vs_predicted(\n    evaluation_df,\n    xlim=xy_lim,\n    ylim=xy_lim,\n    title=\"Actual vs Predicted Home Values\",\n    x_label=\"Actual Home Value\",\n    y_label=\"Predicted Home Value\",\n)\n</pre> plot_actual_vs_predicted(     evaluation_df,     xlim=xy_lim,     ylim=xy_lim,     title=\"Actual vs Predicted Home Values\",     x_label=\"Actual Home Value\",     y_label=\"Predicted Home Value\", ) <p></p>"},{"location":"PDFM/zillow_home_value/#useful-resources","title":"Useful Resources\u00b6","text":"<ul> <li>Google's Population Dynamics Foundation Model (PDFM)</li> <li>Request access to PDFM embeddings here</li> <li>Zillow data can be accessed here</li> </ul>"},{"location":"PDFM/zillow_home_value/#acknowledgements","title":"Acknowledgements\u00b6","text":"<p>This notebook is adapted from the PDFM tutorial. Credit goes to the authors of the PDFM tutorial.</p>"},{"location":"PDFM/zillow_home_value/#installation","title":"Installation\u00b6","text":"<p>Uncomment and run the following cell to install the required libraries.</p>"},{"location":"PDFM/zillow_home_value/#import-libraries","title":"Import Libraries\u00b6","text":""},{"location":"PDFM/zillow_home_value/#download-zillow-data","title":"Download Zillow Data\u00b6","text":""},{"location":"PDFM/zillow_home_value/#process-zillow-data","title":"Process Zillow Data\u00b6","text":""},{"location":"PDFM/zillow_home_value/#request-access-to-pdfm-embeddings","title":"Request access to PDFM Embeddings\u00b6","text":""},{"location":"PDFM/zillow_home_value/#load-pdfm-embeddings","title":"Load PDFM Embeddings\u00b6","text":""},{"location":"PDFM/zillow_home_value/#join-zillow-and-pdfm-data","title":"Join Zillow and PDFM Data\u00b6","text":""},{"location":"PDFM/zillow_home_value/#split-train-and-test-data","title":"Split Train and Test Data\u00b6","text":""},{"location":"PDFM/zillow_home_value/#fit-linear-regression-model","title":"Fit Linear Regression Model\u00b6","text":""},{"location":"PDFM/zillow_home_value/#evaluate-linear-regression-model","title":"Evaluate Linear Regression Model\u00b6","text":""},{"location":"PDFM/zillow_home_value/#fit-k-nearest-neighbors-model","title":"Fit K-Nearest Neighbors Model\u00b6","text":""},{"location":"PDFM/zillow_home_value/#evaluate-k-nearest-neighbors-model","title":"Evaluate K-Nearest Neighbors Model\u00b6","text":""}]}