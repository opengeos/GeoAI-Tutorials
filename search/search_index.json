{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GeoAI-Tutorials","text":"<p>A collection of Jupyter notebook examples for using GeoAI</p>"},{"location":"#population-dynamics-foundation-model","title":"Population Dynamics Foundation Model","text":"<p>Tutorials for Using Google's Population Dynamics Foundation Model (PDFM)</p> <ul> <li>Predicting US Housing Prices with PDFM and Zillow Data</li> <li>Visualizing PDFM Features and Predicted Home Values</li> </ul>"},{"location":"#demos","title":"Demos","text":"<ul> <li>Visualize US meidan home values at the county level</li> </ul> <ul> <li>Visualize PDFM features</li> </ul>"},{"location":"PDFM/map_pdfm_features/","title":"Map pdfm features","text":"<p>Mapping PDFM Features and Predicted Housing Prices</p> In\u00a0[\u00a0]: Copied! <pre># %pip install \"leafmap[maplibre]\" scikit-learn\n</pre> # %pip install \"leafmap[maplibre]\" scikit-learn In\u00a0[\u00a0]: Copied! <pre>import os\nimport pandas as pd\nimport geopandas as gpd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom leafmap.common import evaluate_model, plot_actual_vs_predicted, download_file\nimport leafmap.maplibregl as leafmap\n</pre> import os import pandas as pd import geopandas as gpd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.neighbors import KNeighborsRegressor from leafmap.common import evaluate_model, plot_actual_vs_predicted, download_file import leafmap.maplibregl as leafmap In\u00a0[\u00a0]: Copied! <pre>zhvi_url = \"https://github.com/opengeos/datasets/releases/download/us/zillow_home_value_index_by_county.csv\"\nzhvi_file = \"data/zillow_home_value_index_by_county.csv\"\n</pre> zhvi_url = \"https://github.com/opengeos/datasets/releases/download/us/zillow_home_value_index_by_county.csv\" zhvi_file = \"data/zillow_home_value_index_by_county.csv\" In\u00a0[\u00a0]: Copied! <pre>if not os.path.exists(zhvi_file):\n    download_file(zhvi_url, zhvi_file)\n</pre> if not os.path.exists(zhvi_file):     download_file(zhvi_url, zhvi_file) In\u00a0[\u00a0]: Copied! <pre>zhvi_df = pd.read_csv(\n    zhvi_file, dtype={\"StateCodeFIPS\": \"string\", \"MunicipalCodeFIPS\": \"string\"}\n)\nzhvi_df.index = \"geoId/\" + zhvi_df[\"StateCodeFIPS\"] + zhvi_df[\"MunicipalCodeFIPS\"]\nzhvi_df.head()\n</pre> zhvi_df = pd.read_csv(     zhvi_file, dtype={\"StateCodeFIPS\": \"string\", \"MunicipalCodeFIPS\": \"string\"} ) zhvi_df.index = \"geoId/\" + zhvi_df[\"StateCodeFIPS\"] + zhvi_df[\"MunicipalCodeFIPS\"] zhvi_df.head() In\u00a0[\u00a0]: Copied! <pre>county_geojson = \"data/county.geojson\"\nif not os.path.exists(county_geojson):\n    raise FileNotFoundError(\"Please request the embeddings from Google\")\n</pre> county_geojson = \"data/county.geojson\" if not os.path.exists(county_geojson):     raise FileNotFoundError(\"Please request the embeddings from Google\") In\u00a0[\u00a0]: Copied! <pre>county_gdf = gpd.read_file(county_geojson)\ncounty_gdf.set_index(\"place\", inplace=True)\ncounty_gdf.head()\n</pre> county_gdf = gpd.read_file(county_geojson) county_gdf.set_index(\"place\", inplace=True) county_gdf.head() In\u00a0[\u00a0]: Copied! <pre>df = zhvi_df.join(county_gdf)\nzhvi_gdf = gpd.GeoDataFrame(df, geometry=\"geometry\")\nzhvi_gdf.head()\n</pre> df = zhvi_df.join(county_gdf) zhvi_gdf = gpd.GeoDataFrame(df, geometry=\"geometry\") zhvi_gdf.head() In\u00a0[\u00a0]: Copied! <pre>column = \"2024-10-31\"\ngdf = zhvi_gdf[[\"RegionName\", \"State\", column, \"geometry\"]]\ngdf.head()\n</pre> column = \"2024-10-31\" gdf = zhvi_gdf[[\"RegionName\", \"State\", column, \"geometry\"]] gdf.head() In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\")\nfirst_symbol_id = m.find_first_symbol_layer()[\"id\"]\nm.add_data(\n    gdf,\n    cmap=\"Blues\",\n    column=column,\n    legend_title=\"Median Home Value\",\n    name=\"Median Home Value\",\n    before_id=first_symbol_id,\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\") first_symbol_id = m.find_first_symbol_layer()[\"id\"] m.add_data(     gdf,     cmap=\"Blues\",     column=column,     legend_title=\"Median Home Value\",     name=\"Median Home Value\",     before_id=first_symbol_id, ) m.add_layer_control() m <p></p> In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\", pitch=60)\nm.add_data(\n    gdf,\n    cmap=\"Blues\",\n    column=column,\n    legend_title=\"Median Home Value\",\n    extrude=True,\n    scale_factor=3,\n    before_id=first_symbol_id,\n    name=\"Median Home Value\",\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\", pitch=60) m.add_data(     gdf,     cmap=\"Blues\",     column=column,     legend_title=\"Median Home Value\",     extrude=True,     scale_factor=3,     before_id=first_symbol_id,     name=\"Median Home Value\", ) m.add_layer_control() m <p></p> In\u00a0[\u00a0]: Copied! <pre>embeddings_file_path = \"data/county_embeddings.csv\"\n</pre> embeddings_file_path = \"data/county_embeddings.csv\" In\u00a0[\u00a0]: Copied! <pre>embeddings_df = pd.read_csv(embeddings_file_path).set_index(\"place\")\nembeddings_df.head()\n</pre> embeddings_df = pd.read_csv(embeddings_file_path).set_index(\"place\") embeddings_df.head() In\u00a0[\u00a0]: Copied! <pre>df = embeddings_df.join(county_gdf)\nembeddings_gdf = gpd.GeoDataFrame(df, geometry=\"geometry\")\nembeddings_gdf.head()\n</pre> df = embeddings_df.join(county_gdf) embeddings_gdf = gpd.GeoDataFrame(df, geometry=\"geometry\") embeddings_gdf.head() In\u00a0[\u00a0]: Copied! <pre>column = \"feature329\"  # Change this to the feature you want to use\ngdf = embeddings_gdf[[column, \"state\", \"county\", \"geometry\"]]\ngdf.head()\n</pre> column = \"feature329\"  # Change this to the feature you want to use gdf = embeddings_gdf[[column, \"state\", \"county\", \"geometry\"]] gdf.head() In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\")\nm.add_data(\n    gdf,\n    cmap=\"Blues\",\n    column=column,\n    legend_title=column,\n    before_id=first_symbol_id,\n    name=column,\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\") m.add_data(     gdf,     cmap=\"Blues\",     column=column,     legend_title=column,     before_id=first_symbol_id,     name=column, ) m.add_layer_control() m <p></p> In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\", pitch=60)\nm.add_data(\n    gdf,\n    cmap=\"Blues\",\n    column=column,\n    legend_title=column,\n    before_id=first_symbol_id,\n    name=column,\n    extrude=True,\n    scale_factor=0.00005,\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\", pitch=60) m.add_data(     gdf,     cmap=\"Blues\",     column=column,     legend_title=column,     before_id=first_symbol_id,     name=column,     extrude=True,     scale_factor=0.00005, ) m.add_layer_control() m <p></p> In\u00a0[\u00a0]: Copied! <pre>data = zhvi_df.join(embeddings_df, how=\"inner\")\ndata.head()\n</pre> data = zhvi_df.join(embeddings_df, how=\"inner\") data.head() In\u00a0[\u00a0]: Copied! <pre>embedding_features = [f\"feature{x}\" for x in range(330)]\nlabel = \"2024-10-31\"  # Change this to the date you want to predict\n</pre> embedding_features = [f\"feature{x}\" for x in range(330)] label = \"2024-10-31\"  # Change this to the date you want to predict In\u00a0[\u00a0]: Copied! <pre>data = data.dropna(subset=[label])\n</pre> data = data.dropna(subset=[label]) In\u00a0[\u00a0]: Copied! <pre>data = data[embedding_features + [label]]\nX = data[embedding_features]\ny = data[label]\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42\n)\n</pre> data = data[embedding_features + [label]] X = data[embedding_features] y = data[label]  X_train, X_test, y_train, y_test = train_test_split(     X, y, test_size=0.2, random_state=42 ) In\u00a0[\u00a0]: Copied! <pre>model = LinearRegression()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n</pre> model = LinearRegression() model.fit(X_train, y_train) y_pred = model.predict(X_test) In\u00a0[\u00a0]: Copied! <pre>evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred})\nmetrics = evaluate_model(evaluation_df)\nprint(metrics)\n</pre> evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred}) metrics = evaluate_model(evaluation_df) print(metrics) In\u00a0[\u00a0]: Copied! <pre>xy_lim = (0, 1_000_000)\nplot_actual_vs_predicted(\n    evaluation_df,\n    xlim=xy_lim,\n    ylim=xy_lim,\n    title=\"Actual vs Predicted Home Values\",\n    x_label=\"Actual Home Value\",\n    y_label=\"Predicted Home Value\",\n)\n</pre> xy_lim = (0, 1_000_000) plot_actual_vs_predicted(     evaluation_df,     xlim=xy_lim,     ylim=xy_lim,     title=\"Actual vs Predicted Home Values\",     x_label=\"Actual Home Value\",     y_label=\"Predicted Home Value\", ) <p></p> In\u00a0[\u00a0]: Copied! <pre>df = evaluation_df.join(gdf)\ndf[\"difference\"] = df[\"y_pred\"] - df[\"y\"]\nevaluation_gdf = gpd.GeoDataFrame(df, geometry=\"geometry\")\nevaluation_gdf.drop(columns=[\"category\", \"color\", column], inplace=True)\nevaluation_gdf.head()\n</pre> df = evaluation_df.join(gdf) df[\"difference\"] = df[\"y_pred\"] - df[\"y\"] evaluation_gdf = gpd.GeoDataFrame(df, geometry=\"geometry\") evaluation_gdf.drop(columns=[\"category\", \"color\", column], inplace=True) evaluation_gdf.head() In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\", pitch=60)\nm.add_data(\n    evaluation_gdf,\n    cmap=\"Blues\",\n    column=\"y\",\n    legend_title=\"Actual Home Value\",\n    before_id=first_symbol_id,\n    name=\"Actual Home Value\",\n    extrude=True,\n    scale_factor=3,\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\", pitch=60) m.add_data(     evaluation_gdf,     cmap=\"Blues\",     column=\"y\",     legend_title=\"Actual Home Value\",     before_id=first_symbol_id,     name=\"Actual Home Value\",     extrude=True,     scale_factor=3, ) m.add_layer_control() m <p></p> In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\", pitch=60)\nm.add_data(\n    evaluation_gdf,\n    cmap=\"Blues\",\n    column=\"y_pred\",\n    legend_title=\"Predicted Home Value\",\n    before_id=first_symbol_id,\n    name=\"Predicted Home Value\",\n    extrude=True,\n    scale_factor=3,\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\", pitch=60) m.add_data(     evaluation_gdf,     cmap=\"Blues\",     column=\"y_pred\",     legend_title=\"Predicted Home Value\",     before_id=first_symbol_id,     name=\"Predicted Home Value\",     extrude=True,     scale_factor=3, ) m.add_layer_control() m <p></p> In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\", pitch=60)\nm.add_data(\n    evaluation_gdf,\n    cmap=\"coolwarm\",\n    column=\"difference\",\n    legend_title=\"y_pred-y\",\n    before_id=first_symbol_id,\n    name=\"Difference\",\n    extrude=True,\n    scale_factor=3,\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\", pitch=60) m.add_data(     evaluation_gdf,     cmap=\"coolwarm\",     column=\"difference\",     legend_title=\"y_pred-y\",     before_id=first_symbol_id,     name=\"Difference\",     extrude=True,     scale_factor=3, ) m.add_layer_control() m <p></p>"},{"location":"PDFM/map_pdfm_features/#useful-resources","title":"Useful Resources\u00b6","text":"<ul> <li>Google's Population Dynamics Foundation Model (PDFM)</li> <li>Request access to PDFM embeddings here</li> <li>Zillow data can be accessed here</li> </ul>"},{"location":"PDFM/map_pdfm_features/#installation","title":"Installation\u00b6","text":"<p>Uncomment and run the following cell to install the required libraries.</p>"},{"location":"PDFM/map_pdfm_features/#import-libraries","title":"Import Libraries\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#download-zillow-data","title":"Download Zillow Data\u00b6","text":"<p>Download the Zillow home value data at the county level.</p>"},{"location":"PDFM/map_pdfm_features/#process-zillow-data","title":"Process Zillow Data\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#request-access-to-pdfm-embeddings","title":"Request access to PDFM Embeddings\u00b6","text":"<p>To request access to PDFM embeddings, please follow the instructions here.</p>"},{"location":"PDFM/map_pdfm_features/#load-county-boundaries","title":"Load county boundaries\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#join-home-value-data-and-county-boundaries","title":"Join home value data and county boundaries\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#visualize-home-values-in-2d","title":"Visualize home values in 2D\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#visualize-home-values-in-3d","title":"Visualize home values in 3D\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#load-pdfm-county-embeddings","title":"Load PDFM county embeddings\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#visualize-pdfm-features","title":"Visualize PDFM features\u00b6","text":"<p>Select any of the 329 PDFM features to visualize.</p>"},{"location":"PDFM/map_pdfm_features/#join-zillow-and-pdfm-data","title":"Join Zillow and PDFM Data\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#split-train-and-test-data","title":"Split Train and Test Data\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#fit-linear-regression-model","title":"Fit Linear Regression Model\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#evaluate-linear-regression-model","title":"Evaluate Linear Regression Model\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#join-predicted-values-with-county-boundaries","title":"Join predicted values with county boundaries\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#visualize-actual-home-values","title":"Visualize actual home values\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#visualize-predicted-home-values","title":"Visualize predicted home values\u00b6","text":""},{"location":"PDFM/map_pdfm_features/#visualize-difference-between-predicted-and-actual-home-values","title":"Visualize difference between predicted and actual home values\u00b6","text":""},{"location":"PDFM/zillow_home_value/","title":"Zillow home value","text":"<p>Predicting US Housing Prices at the Zip Code Level Using Google's Population Dynamics Foundation Model and Zillow Data</p> In\u00a0[\u00a0]: Copied! <pre># %pip install leafmap scikit-learn\n</pre> # %pip install leafmap scikit-learn In\u00a0[\u00a0]: Copied! <pre>import os\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom leafmap.common import evaluate_model, plot_actual_vs_predicted, download_file\n</pre> import os import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.neighbors import KNeighborsRegressor from leafmap.common import evaluate_model, plot_actual_vs_predicted, download_file In\u00a0[\u00a0]: Copied! <pre>zhvi_url = \"https://github.com/opengeos/datasets/releases/download/us/zillow_home_value_index_by_zipcode.csv\"\nzhvi_file = \"data/zillow_home_value_index_by_zipcode.csv\"\n</pre> zhvi_url = \"https://github.com/opengeos/datasets/releases/download/us/zillow_home_value_index_by_zipcode.csv\" zhvi_file = \"data/zillow_home_value_index_by_zipcode.csv\" In\u00a0[\u00a0]: Copied! <pre>if not os.path.exists(zhvi_file):\n    download_file(zhvi_url, zhvi_file)\n</pre> if not os.path.exists(zhvi_file):     download_file(zhvi_url, zhvi_file) In\u00a0[\u00a0]: Copied! <pre>zhvi_df = pd.read_csv(zhvi_file, dtype={\"RegionName\": \"string\"})\nzhvi_df.index = zhvi_df[\"RegionName\"].apply(lambda x: f\"zip/{x}\")\nzhvi_df.head()\n</pre> zhvi_df = pd.read_csv(zhvi_file, dtype={\"RegionName\": \"string\"}) zhvi_df.index = zhvi_df[\"RegionName\"].apply(lambda x: f\"zip/{x}\") zhvi_df.head() In\u00a0[\u00a0]: Copied! <pre>embeddings_file_path = \"data/zcta_embeddings.csv\"\n</pre> embeddings_file_path = \"data/zcta_embeddings.csv\" <p>To request access to PDFM embeddings, please follow the instructions here.</p> In\u00a0[\u00a0]: Copied! <pre>if not os.path.exists(embeddings_file_path):\n    raise FileNotFoundError(\"Please request the embeddings from Google\")\n</pre> if not os.path.exists(embeddings_file_path):     raise FileNotFoundError(\"Please request the embeddings from Google\") In\u00a0[\u00a0]: Copied! <pre>zipcode_embeddings = pd.read_csv(embeddings_file_path).set_index(\"place\")\nzipcode_embeddings.head()\n</pre> zipcode_embeddings = pd.read_csv(embeddings_file_path).set_index(\"place\") zipcode_embeddings.head() In\u00a0[\u00a0]: Copied! <pre>data = zhvi_df.join(zipcode_embeddings, how=\"inner\")\ndata.head()\n</pre> data = zhvi_df.join(zipcode_embeddings, how=\"inner\") data.head() In\u00a0[\u00a0]: Copied! <pre>embedding_features = [f\"feature{x}\" for x in range(330)]\nlabel = \"2024-10-31\"\n</pre> embedding_features = [f\"feature{x}\" for x in range(330)] label = \"2024-10-31\" In\u00a0[\u00a0]: Copied! <pre>data = data.dropna(subset=[label])\n</pre> data = data.dropna(subset=[label]) In\u00a0[\u00a0]: Copied! <pre>data = data[embedding_features + [label]]\nX = data[embedding_features]\ny = data[label]\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42\n)\n</pre> data = data[embedding_features + [label]] X = data[embedding_features] y = data[label]  X_train, X_test, y_train, y_test = train_test_split(     X, y, test_size=0.2, random_state=42 ) In\u00a0[\u00a0]: Copied! <pre># Initialize and train a simple linear regression model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n</pre> # Initialize and train a simple linear regression model model = LinearRegression() model.fit(X_train, y_train)  # Make predictions y_pred = model.predict(X_test) In\u00a0[\u00a0]: Copied! <pre>evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred})\nmetrics = evaluate_model(evaluation_df)\nprint(metrics)\n</pre> evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred}) metrics = evaluate_model(evaluation_df) print(metrics) In\u00a0[\u00a0]: Copied! <pre>xy_lim = (0, 3_000_000)\nplot_actual_vs_predicted(\n    evaluation_df,\n    xlim=xy_lim,\n    ylim=xy_lim,\n    title=\"Actual vs Predicted Home Values\",\n    x_label=\"Actual Home Value\",\n    y_label=\"Predicted Home Value\",\n)\n</pre> xy_lim = (0, 3_000_000) plot_actual_vs_predicted(     evaluation_df,     xlim=xy_lim,     ylim=xy_lim,     title=\"Actual vs Predicted Home Values\",     x_label=\"Actual Home Value\",     y_label=\"Predicted Home Value\", ) <p></p> In\u00a0[\u00a0]: Copied! <pre>k = 5\nmodel = KNeighborsRegressor(n_neighbors=k)\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\n</pre> k = 5 model = KNeighborsRegressor(n_neighbors=k) model.fit(X_train, y_train)  y_pred = model.predict(X_test) In\u00a0[\u00a0]: Copied! <pre>evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred})\n# Evaluate the model\nmetrics = evaluate_model(evaluation_df)\nprint(metrics)\n</pre> evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred}) # Evaluate the model metrics = evaluate_model(evaluation_df) print(metrics) In\u00a0[\u00a0]: Copied! <pre>plot_actual_vs_predicted(\n    evaluation_df,\n    xlim=xy_lim,\n    ylim=xy_lim,\n    title=\"Actual vs Predicted Home Values\",\n    x_label=\"Actual Home Value\",\n    y_label=\"Predicted Home Value\",\n)\n</pre> plot_actual_vs_predicted(     evaluation_df,     xlim=xy_lim,     ylim=xy_lim,     title=\"Actual vs Predicted Home Values\",     x_label=\"Actual Home Value\",     y_label=\"Predicted Home Value\", ) <p></p>"},{"location":"PDFM/zillow_home_value/#useful-resources","title":"Useful Resources\u00b6","text":"<ul> <li>Google's Population Dynamics Foundation Model (PDFM)</li> <li>Request access to PDFM embeddings here</li> <li>Zillow data can be accessed here</li> </ul>"},{"location":"PDFM/zillow_home_value/#acknowledgements","title":"Acknowledgements\u00b6","text":"<p>This notebook is adapted from the PDFM tutorial. Credit goes to the authors of the PDFM tutorial.</p>"},{"location":"PDFM/zillow_home_value/#installation","title":"Installation\u00b6","text":"<p>Uncomment and run the following cell to install the required libraries.</p>"},{"location":"PDFM/zillow_home_value/#import-libraries","title":"Import Libraries\u00b6","text":""},{"location":"PDFM/zillow_home_value/#download-zillow-data","title":"Download Zillow Data\u00b6","text":""},{"location":"PDFM/zillow_home_value/#process-zillow-data","title":"Process Zillow Data\u00b6","text":""},{"location":"PDFM/zillow_home_value/#request-access-to-pdfm-embeddings","title":"Request access to PDFM Embeddings\u00b6","text":""},{"location":"PDFM/zillow_home_value/#load-pdfm-embeddings","title":"Load PDFM Embeddings\u00b6","text":""},{"location":"PDFM/zillow_home_value/#join-zillow-and-pdfm-data","title":"Join Zillow and PDFM Data\u00b6","text":""},{"location":"PDFM/zillow_home_value/#split-train-and-test-data","title":"Split Train and Test Data\u00b6","text":""},{"location":"PDFM/zillow_home_value/#fit-linear-regression-model","title":"Fit Linear Regression Model\u00b6","text":""},{"location":"PDFM/zillow_home_value/#evaluate-linear-regression-model","title":"Evaluate Linear Regression Model\u00b6","text":""},{"location":"PDFM/zillow_home_value/#fit-k-nearest-neighbors-model","title":"Fit K-Nearest Neighbors Model\u00b6","text":""},{"location":"PDFM/zillow_home_value/#evaluate-k-nearest-neighbors-model","title":"Evaluate K-Nearest Neighbors Model\u00b6","text":""},{"location":"workshops/AIforGood_2025/","title":"AIforGood 2025","text":"In\u00a0[\u00a0]: Copied! <pre>%pip install \"leafmap[maplibre]\" scikit-learn\n</pre> %pip install \"leafmap[maplibre]\" scikit-learn In\u00a0[\u00a0]: Copied! <pre>import os\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom leafmap.common import evaluate_model, plot_actual_vs_predicted, download_file\n</pre> import os import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.neighbors import KNeighborsRegressor from leafmap.common import evaluate_model, plot_actual_vs_predicted, download_file In\u00a0[\u00a0]: Copied! <pre>zhvi_url = \"https://github.com/opengeos/datasets/releases/download/us/zillow_home_value_index_by_zipcode.csv\"\nzhvi_file = \"zillow_home_value_index_by_zipcode.csv\"\n</pre> zhvi_url = \"https://github.com/opengeos/datasets/releases/download/us/zillow_home_value_index_by_zipcode.csv\" zhvi_file = \"zillow_home_value_index_by_zipcode.csv\" In\u00a0[\u00a0]: Copied! <pre>if not os.path.exists(zhvi_file):\n    download_file(zhvi_url, zhvi_file)\n</pre> if not os.path.exists(zhvi_file):     download_file(zhvi_url, zhvi_file) In\u00a0[\u00a0]: Copied! <pre>zhvi_df = pd.read_csv(zhvi_file, dtype={\"RegionName\": \"string\"})\nzhvi_df.index = zhvi_df[\"RegionName\"].apply(lambda x: f\"zip/{x}\")\nzhvi_df.head()\n</pre> zhvi_df = pd.read_csv(zhvi_file, dtype={\"RegionName\": \"string\"}) zhvi_df.index = zhvi_df[\"RegionName\"].apply(lambda x: f\"zip/{x}\") zhvi_df.head() In\u00a0[\u00a0]: Copied! <pre>embeddings_file_path = \"zcta_embeddings.csv\"\n</pre> embeddings_file_path = \"zcta_embeddings.csv\" In\u00a0[\u00a0]: Copied! <pre>if not os.path.exists(embeddings_file_path):\n    raise FileNotFoundError(\"Please request the embeddings from Google\")\n</pre> if not os.path.exists(embeddings_file_path):     raise FileNotFoundError(\"Please request the embeddings from Google\") In\u00a0[\u00a0]: Copied! <pre>zipcode_embeddings = pd.read_csv(embeddings_file_path).set_index(\"place\")\nzipcode_embeddings.head()\n</pre> zipcode_embeddings = pd.read_csv(embeddings_file_path).set_index(\"place\") zipcode_embeddings.head() In\u00a0[\u00a0]: Copied! <pre>data = zhvi_df.join(zipcode_embeddings, how=\"inner\")\ndata.head()\n</pre> data = zhvi_df.join(zipcode_embeddings, how=\"inner\") data.head() In\u00a0[\u00a0]: Copied! <pre>embedding_features = [f\"feature{x}\" for x in range(330)]\nlabel = \"2025-01-31\"\n</pre> embedding_features = [f\"feature{x}\" for x in range(330)] label = \"2025-01-31\" In\u00a0[\u00a0]: Copied! <pre>data = data.dropna(subset=[label])\n</pre> data = data.dropna(subset=[label]) In\u00a0[\u00a0]: Copied! <pre>data = data[embedding_features + [label]]\nX = data[embedding_features]\ny = data[label]\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42\n)\n</pre> data = data[embedding_features + [label]] X = data[embedding_features] y = data[label]  X_train, X_test, y_train, y_test = train_test_split(     X, y, test_size=0.2, random_state=42 ) In\u00a0[\u00a0]: Copied! <pre>X_train.head()\n</pre> X_train.head() In\u00a0[\u00a0]: Copied! <pre>y_train.head()\n</pre> y_train.head() In\u00a0[\u00a0]: Copied! <pre># Initialize and train a simple linear regression model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n</pre> # Initialize and train a simple linear regression model model = LinearRegression() model.fit(X_train, y_train)  # Make predictions y_pred = model.predict(X_test) In\u00a0[\u00a0]: Copied! <pre>evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred})\nmetrics = evaluate_model(evaluation_df)\nprint(metrics)\n</pre> evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred}) metrics = evaluate_model(evaluation_df) print(metrics) In\u00a0[\u00a0]: Copied! <pre>xy_lim = (0, 3_000_000)\nplot_actual_vs_predicted(\n    evaluation_df,\n    xlim=xy_lim,\n    ylim=xy_lim,\n    title=\"Actual vs Predicted Home Values\",\n    x_label=\"Actual Home Value\",\n    y_label=\"Predicted Home Value\",\n)\n</pre> xy_lim = (0, 3_000_000) plot_actual_vs_predicted(     evaluation_df,     xlim=xy_lim,     ylim=xy_lim,     title=\"Actual vs Predicted Home Values\",     x_label=\"Actual Home Value\",     y_label=\"Predicted Home Value\", ) In\u00a0[\u00a0]: Copied! <pre>k = 5\nmodel = KNeighborsRegressor(n_neighbors=k)\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\n</pre> k = 5 model = KNeighborsRegressor(n_neighbors=k) model.fit(X_train, y_train)  y_pred = model.predict(X_test) In\u00a0[\u00a0]: Copied! <pre>evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred})\nmetrics = evaluate_model(evaluation_df)\nprint(metrics)\n</pre> evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred}) metrics = evaluate_model(evaluation_df) print(metrics) In\u00a0[\u00a0]: Copied! <pre>plot_actual_vs_predicted(\n    evaluation_df,\n    xlim=xy_lim,\n    ylim=xy_lim,\n    title=\"Actual vs Predicted Home Values\",\n    x_label=\"Actual Home Value\",\n    y_label=\"Predicted Home Value\",\n)\n</pre> plot_actual_vs_predicted(     evaluation_df,     xlim=xy_lim,     ylim=xy_lim,     title=\"Actual vs Predicted Home Values\",     x_label=\"Actual Home Value\",     y_label=\"Predicted Home Value\", ) In\u00a0[\u00a0]: Copied! <pre>import os\nimport pandas as pd\nimport geopandas as gpd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom leafmap.common import evaluate_model, plot_actual_vs_predicted, download_file\nimport leafmap.maplibregl as leafmap\n</pre> import os import pandas as pd import geopandas as gpd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.neighbors import KNeighborsRegressor from leafmap.common import evaluate_model, plot_actual_vs_predicted, download_file import leafmap.maplibregl as leafmap In\u00a0[\u00a0]: Copied! <pre>zhvi_url = \"https://github.com/opengeos/datasets/releases/download/us/zillow_home_value_index_by_county.csv\"\nzhvi_file = \"zillow_home_value_index_by_county.csv\"\n</pre> zhvi_url = \"https://github.com/opengeos/datasets/releases/download/us/zillow_home_value_index_by_county.csv\" zhvi_file = \"zillow_home_value_index_by_county.csv\" In\u00a0[\u00a0]: Copied! <pre>if not os.path.exists(zhvi_file):\n    download_file(zhvi_url, zhvi_file)\n</pre> if not os.path.exists(zhvi_file):     download_file(zhvi_url, zhvi_file) In\u00a0[\u00a0]: Copied! <pre>zhvi_df = pd.read_csv(\n    zhvi_file, dtype={\"StateCodeFIPS\": \"string\", \"MunicipalCodeFIPS\": \"string\"}\n)\nzhvi_df.index = \"geoId/\" + zhvi_df[\"StateCodeFIPS\"] + zhvi_df[\"MunicipalCodeFIPS\"]\nzhvi_df.head()\n</pre> zhvi_df = pd.read_csv(     zhvi_file, dtype={\"StateCodeFIPS\": \"string\", \"MunicipalCodeFIPS\": \"string\"} ) zhvi_df.index = \"geoId/\" + zhvi_df[\"StateCodeFIPS\"] + zhvi_df[\"MunicipalCodeFIPS\"] zhvi_df.head() In\u00a0[\u00a0]: Copied! <pre>county_geojson = \"county.geojson\"\nif not os.path.exists(county_geojson):\n    raise FileNotFoundError(\"Please request the embeddings from Google\")\n</pre> county_geojson = \"county.geojson\" if not os.path.exists(county_geojson):     raise FileNotFoundError(\"Please request the embeddings from Google\") In\u00a0[\u00a0]: Copied! <pre>county_gdf = gpd.read_file(county_geojson)\ncounty_gdf.set_index(\"place\", inplace=True)\ncounty_gdf.head()\n</pre> county_gdf = gpd.read_file(county_geojson) county_gdf.set_index(\"place\", inplace=True) county_gdf.head() In\u00a0[\u00a0]: Copied! <pre>df = zhvi_df.join(county_gdf)\nzhvi_gdf = gpd.GeoDataFrame(df, geometry=\"geometry\")\nzhvi_gdf.head()\n</pre> df = zhvi_df.join(county_gdf) zhvi_gdf = gpd.GeoDataFrame(df, geometry=\"geometry\") zhvi_gdf.head() In\u00a0[\u00a0]: Copied! <pre>column = \"2025-01-31\"\ngdf = zhvi_gdf[[\"RegionName\", \"State\", column, \"geometry\"]]\ngdf.head()\n</pre> column = \"2025-01-31\" gdf = zhvi_gdf[[\"RegionName\", \"State\", column, \"geometry\"]] gdf.head() In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\")\nfirst_symbol_id = m.find_first_symbol_layer()[\"id\"]\nm.add_data(\n    gdf,\n    cmap=\"Blues\",\n    column=column,\n    legend_title=\"Median Home Value\",\n    name=\"Median Home Value\",\n    before_id=first_symbol_id,\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\") first_symbol_id = m.find_first_symbol_layer()[\"id\"] m.add_data(     gdf,     cmap=\"Blues\",     column=column,     legend_title=\"Median Home Value\",     name=\"Median Home Value\",     before_id=first_symbol_id, ) m.add_layer_control() m In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\", pitch=60)\nm.add_data(\n    gdf,\n    cmap=\"Blues\",\n    column=column,\n    legend_title=\"Median Home Value\",\n    extrude=True,\n    scale_factor=3,\n    before_id=first_symbol_id,\n    name=\"Median Home Value\",\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\", pitch=60) m.add_data(     gdf,     cmap=\"Blues\",     column=column,     legend_title=\"Median Home Value\",     extrude=True,     scale_factor=3,     before_id=first_symbol_id,     name=\"Median Home Value\", ) m.add_layer_control() m In\u00a0[\u00a0]: Copied! <pre>embeddings_file_path = \"county_embeddings.csv\"\n</pre> embeddings_file_path = \"county_embeddings.csv\" In\u00a0[\u00a0]: Copied! <pre>embeddings_df = pd.read_csv(embeddings_file_path).set_index(\"place\")\nembeddings_df.head()\n</pre> embeddings_df = pd.read_csv(embeddings_file_path).set_index(\"place\") embeddings_df.head() In\u00a0[\u00a0]: Copied! <pre>df = embeddings_df.join(county_gdf)\nembeddings_gdf = gpd.GeoDataFrame(df, geometry=\"geometry\")\nembeddings_gdf.head()\n</pre> df = embeddings_df.join(county_gdf) embeddings_gdf = gpd.GeoDataFrame(df, geometry=\"geometry\") embeddings_gdf.head() In\u00a0[\u00a0]: Copied! <pre>column = \"feature329\"  # Change this to the feature you want to use\ngdf = embeddings_gdf[[column, \"state\", \"county\", \"geometry\"]]\ngdf.head()\n</pre> column = \"feature329\"  # Change this to the feature you want to use gdf = embeddings_gdf[[column, \"state\", \"county\", \"geometry\"]] gdf.head() In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\")\nm.add_data(\n    gdf,\n    cmap=\"Blues\",\n    column=column,\n    legend_title=column,\n    before_id=first_symbol_id,\n    name=column,\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\") m.add_data(     gdf,     cmap=\"Blues\",     column=column,     legend_title=column,     before_id=first_symbol_id,     name=column, ) m.add_layer_control() m In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\", pitch=60)\nm.add_data(\n    gdf,\n    cmap=\"Blues\",\n    column=column,\n    legend_title=column,\n    before_id=first_symbol_id,\n    name=column,\n    extrude=True,\n    scale_factor=0.00005,\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\", pitch=60) m.add_data(     gdf,     cmap=\"Blues\",     column=column,     legend_title=column,     before_id=first_symbol_id,     name=column,     extrude=True,     scale_factor=0.00005, ) m.add_layer_control() m In\u00a0[\u00a0]: Copied! <pre>data = zhvi_df.join(embeddings_df, how=\"inner\")\ndata.head()\n</pre> data = zhvi_df.join(embeddings_df, how=\"inner\") data.head() In\u00a0[\u00a0]: Copied! <pre>embedding_features = [f\"feature{x}\" for x in range(330)]\nlabel = \"2025-01-31\"  # Change this to the date you want to predict\n</pre> embedding_features = [f\"feature{x}\" for x in range(330)] label = \"2025-01-31\"  # Change this to the date you want to predict In\u00a0[\u00a0]: Copied! <pre>data = data.dropna(subset=[label])\n</pre> data = data.dropna(subset=[label]) In\u00a0[\u00a0]: Copied! <pre>data = data[embedding_features + [label]]\nX = data[embedding_features]\ny = data[label]\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42\n)\n</pre> data = data[embedding_features + [label]] X = data[embedding_features] y = data[label]  X_train, X_test, y_train, y_test = train_test_split(     X, y, test_size=0.2, random_state=42 ) In\u00a0[\u00a0]: Copied! <pre>model = LinearRegression()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n</pre> model = LinearRegression() model.fit(X_train, y_train) y_pred = model.predict(X_test) In\u00a0[\u00a0]: Copied! <pre>evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred})\nmetrics = evaluate_model(evaluation_df)\nprint(metrics)\n</pre> evaluation_df = pd.DataFrame({\"y\": y_test, \"y_pred\": y_pred}) metrics = evaluate_model(evaluation_df) print(metrics) In\u00a0[\u00a0]: Copied! <pre>xy_lim = (0, 1_000_000)\nplot_actual_vs_predicted(\n    evaluation_df,\n    xlim=xy_lim,\n    ylim=xy_lim,\n    title=\"Actual vs Predicted Home Values\",\n    x_label=\"Actual Home Value\",\n    y_label=\"Predicted Home Value\",\n)\n</pre> xy_lim = (0, 1_000_000) plot_actual_vs_predicted(     evaluation_df,     xlim=xy_lim,     ylim=xy_lim,     title=\"Actual vs Predicted Home Values\",     x_label=\"Actual Home Value\",     y_label=\"Predicted Home Value\", ) In\u00a0[\u00a0]: Copied! <pre>df = evaluation_df.join(gdf)\ndf[\"difference\"] = df[\"y_pred\"] - df[\"y\"]\nevaluation_gdf = gpd.GeoDataFrame(df, geometry=\"geometry\")\nevaluation_gdf.drop(columns=[\"category\", \"color\", column], inplace=True)\nevaluation_gdf.head()\n</pre> df = evaluation_df.join(gdf) df[\"difference\"] = df[\"y_pred\"] - df[\"y\"] evaluation_gdf = gpd.GeoDataFrame(df, geometry=\"geometry\") evaluation_gdf.drop(columns=[\"category\", \"color\", column], inplace=True) evaluation_gdf.head() In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\", pitch=60)\nm.add_data(\n    evaluation_gdf,\n    cmap=\"Blues\",\n    column=\"y\",\n    legend_title=\"Actual Home Value\",\n    before_id=first_symbol_id,\n    name=\"Actual Home Value\",\n    extrude=True,\n    scale_factor=3,\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\", pitch=60) m.add_data(     evaluation_gdf,     cmap=\"Blues\",     column=\"y\",     legend_title=\"Actual Home Value\",     before_id=first_symbol_id,     name=\"Actual Home Value\",     extrude=True,     scale_factor=3, ) m.add_layer_control() m In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\", pitch=60)\nm.add_data(\n    evaluation_gdf,\n    cmap=\"Blues\",\n    column=\"y_pred\",\n    legend_title=\"Predicted Home Value\",\n    before_id=first_symbol_id,\n    name=\"Predicted Home Value\",\n    extrude=True,\n    scale_factor=3,\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\", pitch=60) m.add_data(     evaluation_gdf,     cmap=\"Blues\",     column=\"y_pred\",     legend_title=\"Predicted Home Value\",     before_id=first_symbol_id,     name=\"Predicted Home Value\",     extrude=True,     scale_factor=3, ) m.add_layer_control() m In\u00a0[\u00a0]: Copied! <pre>m = leafmap.Map(style=\"liberty\", pitch=60)\nm.add_data(\n    evaluation_gdf,\n    cmap=\"coolwarm\",\n    column=\"difference\",\n    legend_title=\"y_pred-y\",\n    before_id=first_symbol_id,\n    name=\"Difference\",\n    extrude=True,\n    scale_factor=3,\n)\nm.add_layer_control()\nm\n</pre> m = leafmap.Map(style=\"liberty\", pitch=60) m.add_data(     evaluation_gdf,     cmap=\"coolwarm\",     column=\"difference\",     legend_title=\"y_pred-y\",     before_id=first_symbol_id,     name=\"Difference\",     extrude=True,     scale_factor=3, ) m.add_layer_control() m"},{"location":"workshops/AIforGood_2025/#ai-for-good-workshop-2025","title":"AI for Good Workshop 2025\u00b6","text":"<p>Join us for the AI for Good Workshop 2025, part of the UN's AI for Good workshop series! This workshop will take place online on February 18, 2025, from 9:00 AM to 10:30 AM EST. It is free and open to the public. Please register using this link: Modeling population dynamics with AI: A hands-on workshop with the Population Dynamics Foundation Model.</p>"},{"location":"workshops/AIforGood_2025/#overview","title":"Overview\u00b6","text":"<p>Explore the transformative potential of the Population Dynamics Foundation Model (PDFM), a cutting-edge AI model designed to capture complex, multidimensional interactions among human behaviors, environmental factors, and local contexts. This workshop provides an in-depth introduction to PDFM Embeddings and their applications in geospatial analysis, public health, and socioeconomic modeling.</p> <p>Participants will gain hands-on experience with PDFM Embeddings to perform advanced geospatial predictions and analyses while ensuring privacy through the use of aggregated data. Key components of the workshop include:</p> <ul> <li>Introduction to PDFM Embeddings: Delve into the model architecture of PDFM and discover how aggregated data (such as search trends, busyness levels, and weather conditions) generates location-specific embeddings.</li> <li>Data Preparation: Learn to integrate ground truth data, including health statistics and socioeconomic indicators, with PDFM Embeddings at the postal code or county level.</li> <li>Hands-On Exercises: Engage with interactive Colab notebooks to explore real-world applications, such as predicting housing prices using Zillow data and nighttime light predictions with Google Earth Engine data.</li> <li>Visualization and Interpretation: Analyze and visualize geospatial predictions and PDFM features in 3D, enhancing your ability to interpret complex datasets.</li> </ul> <p>By the end of this workshop, participants will have a strong foundation in utilizing PDFM Embeddings to address real-world geospatial challenges.</p>"},{"location":"workshops/AIforGood_2025/#target-audience","title":"Target audience\u00b6","text":"<p>This workshop is designed for data scientists, geospatial analysts, researchers, urban planners, and professionals in public health, economics, or environmental science who want to integrate AI into their workflows.</p>"},{"location":"workshops/AIforGood_2025/#prerequisites","title":"Prerequisites\u00b6","text":"<ul> <li>A Google Colab account</li> <li>Access to the PDFM embeddings</li> <li>Basic understanding of Python programming and geospatial data concepts is recommended</li> </ul>"},{"location":"workshops/AIforGood_2025/#recording","title":"Recording\u00b6","text":"<p>The recording of the workshop will be made available on YouTube after the event. Stay tuned for the link!</p>"},{"location":"workshops/AIforGood_2025/#environment-setup","title":"Environment setup\u00b6","text":""},{"location":"workshops/AIforGood_2025/#install-the-required-packages-locally","title":"Install the required packages locally\u00b6","text":"<p>If you are running this notebook locally, you can install the required packages using the following commands:</p> <pre>conda create -n sam python=3.12\nconda activate geo\nconda install -c conda-forge mamba\nmamba install -c conda-forge leafmap maplibre scikit-learn\n</pre>"},{"location":"workshops/AIforGood_2025/#use-google-colab","title":"Use Google Colab\u00b6","text":"<p>If you are using Google Colab, run the following cell to install the required packages:</p>"},{"location":"workshops/AIforGood_2025/#predicting-us-housing-prices-using-pdfm-and-zillow-data","title":"Predicting US Housing Prices Using PDFM and Zillow Data\u00b6","text":"<p>To follow along with the workshop, you will need to have access to the PDFM embeddings. Please request access to the PDFM embeddings here. Download the embeddings and upload them to your Google Drive or Google Colab environment.</p> <p>This notebook is adapted from the PDFM tutorial. Credit goes to the authors of the PDFM tutorial.</p>"},{"location":"workshops/AIforGood_2025/#import-libraries","title":"Import Libraries\u00b6","text":""},{"location":"workshops/AIforGood_2025/#download-zillow-data","title":"Download Zillow Data\u00b6","text":"<p>The Zillow housing data can be downloaded from the Zillow Research Data page. We will use the Zillow Home Value Index (ZHVI) data for single-family homes at the county level.</p>"},{"location":"workshops/AIforGood_2025/#process-zillow-data","title":"Process Zillow Data\u00b6","text":"<p>The Zillow ZHVI dataset contains a <code>RegionName</code> column that corresponds to the zip code. We need to format the zip code to match the PDFM embeddings' <code>postal_code</code> format, which looks like <code>zip/XXXXX</code>.</p>"},{"location":"workshops/AIforGood_2025/#request-access-to-pdfm-embeddings","title":"Request access to PDFM Embeddings\u00b6","text":"<p>Please request access to the PDFM embeddings here. Download the embeddings, unzip the file, and upload the following files to Google Colab:</p> <ul> <li><code>zcta_embeddings.csv</code></li> <li><code>county_embeddings.csv</code></li> <li><code>county.geojson</code></li> </ul>"},{"location":"workshops/AIforGood_2025/#load-pdfm-embeddings","title":"Load PDFM Embeddings\u00b6","text":"<p>We will load the PDFM embeddings from Google Colab where you saved the embeddings.</p>"},{"location":"workshops/AIforGood_2025/#join-zillow-and-pdfm-data","title":"Join Zillow and PDFM Data\u00b6","text":"<p>We will join the Zillow and PDFM data using the GeoDataFrame index.</p>"},{"location":"workshops/AIforGood_2025/#split-train-and-test-data","title":"Split Train and Test Data\u00b6","text":"<p>We will split the data into training and testing datasets using a 80-20 split. We will use the training data to train a machine learning model to predict housing prices.</p>"},{"location":"workshops/AIforGood_2025/#fit-linear-regression-model","title":"Fit Linear Regression Model\u00b6","text":"<p>We will fit a linear regression model to predict the Zillow Home Value Index (ZHVI) using the PDFM embeddings.</p>"},{"location":"workshops/AIforGood_2025/#evaluate-linear-regression-model","title":"Evaluate Linear Regression Model\u00b6","text":""},{"location":"workshops/AIforGood_2025/#fit-k-nearest-neighbors-model","title":"Fit K-Nearest Neighbors Model\u00b6","text":"<p>We will fit a K-Nearest Neighbors (KNN) model to predict the Zillow Home Value Index (ZHVI) using the PDFM embeddings.</p>"},{"location":"workshops/AIforGood_2025/#evaluate-k-nearest-neighbors-model","title":"Evaluate K-Nearest Neighbors Model\u00b6","text":""},{"location":"workshops/AIforGood_2025/#mapping-pdfm-features-and-predicted-housing-prices","title":"Mapping PDFM Features and Predicted Housing Prices\u00b6","text":""},{"location":"workshops/AIforGood_2025/#import-libraries","title":"Import Libraries\u00b6","text":""},{"location":"workshops/AIforGood_2025/#download-zillow-data","title":"Download Zillow Data\u00b6","text":"<p>Download the Zillow home value data at the county level.</p>"},{"location":"workshops/AIforGood_2025/#process-zillow-data","title":"Process Zillow Data\u00b6","text":"<p>The county-level Zillow ZHVI dataset contains a <code>StateCodeFIPS</code> and <code>MunicipalCodeFIPS</code> column that corresponds to the state and county FIPS codes. We need to format the FIPS codes to match the PDFM embeddings' <code>postal_code</code> format, which looks like <code>geoId/XXYYY</code>.</p>"},{"location":"workshops/AIforGood_2025/#request-access-to-pdfm-embeddings","title":"Request access to PDFM Embeddings\u00b6","text":"<p>The PDFM embeddings zip file you downloaded earlier contains a <code>county.geojson</code> file, which contains US county boundaries.</p>"},{"location":"workshops/AIforGood_2025/#load-county-boundaries","title":"Load county boundaries\u00b6","text":""},{"location":"workshops/AIforGood_2025/#join-home-value-data-and-county-boundaries","title":"Join home value data and county boundaries\u00b6","text":""},{"location":"workshops/AIforGood_2025/#visualize-home-values-in-2d","title":"Visualize home values in 2D\u00b6","text":""},{"location":"workshops/AIforGood_2025/#visualize-home-values-in-3d","title":"Visualize home values in 3D\u00b6","text":""},{"location":"workshops/AIforGood_2025/#load-pdfm-county-embeddings","title":"Load PDFM county embeddings\u00b6","text":""},{"location":"workshops/AIforGood_2025/#visualize-pdfm-features","title":"Visualize PDFM features\u00b6","text":"<p>Select any of the 330 PDFM features to visualize.</p>"},{"location":"workshops/AIforGood_2025/#join-zillow-and-pdfm-data","title":"Join Zillow and PDFM Data\u00b6","text":""},{"location":"workshops/AIforGood_2025/#split-train-and-test-data","title":"Split Train and Test Data\u00b6","text":""},{"location":"workshops/AIforGood_2025/#fit-linear-regression-model","title":"Fit Linear Regression Model\u00b6","text":""},{"location":"workshops/AIforGood_2025/#evaluate-linear-regression-model","title":"Evaluate Linear Regression Model\u00b6","text":""},{"location":"workshops/AIforGood_2025/#join-predicted-values-with-county-boundaries","title":"Join predicted values with county boundaries\u00b6","text":""},{"location":"workshops/AIforGood_2025/#visualize-actual-home-values","title":"Visualize actual home values\u00b6","text":""},{"location":"workshops/AIforGood_2025/#visualize-predicted-home-values","title":"Visualize predicted home values\u00b6","text":""},{"location":"workshops/AIforGood_2025/#visualize-difference-between-predicted-and-actual-home-values","title":"Visualize difference between predicted and actual home values\u00b6","text":""}]}